'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
% ZIPsFS(1)
.SH NAME
.PP
\f[B]ZIPsFS\f[R] - FUSE-based overlay union file system expanding ZIP
files
.SH SYNOPSIS
.IP
.nf
\f[C]
ZIPsFS \[rs][*ZIPsFS-options*\[rs]] *path-of-branch1* *path-of-branch2*  *path-of-branch3*   :  \[rs][*fuse-options*\[rs]] *mount-point*
\f[R]
.fi
.SS Example
.SS First create some example files
.IP
.nf
\f[C]
b1=\[ti]/test/ZIPsFS/writable
b2=\[ti]/test/ZIPsFS/branch1
b3=\[ti]/test/ZIPsFS/branch2
mnt=\[ti]/test/ZIPsFS/mnt

mkdir -p $b1 $b2 $b3 $mnt

for c in a b c d e f; do echo hello world $c >$b2/$c.txt; done
for ((i=0;i<10;i++)); do echo hello world $i >$b3/$i.txt; done

zip --fifo $b2/zipfile1.zip <(date)  <(date \[aq]+%Y-%M-%d %H:%m %S\[aq])
zip --fifo $b3/zipfile2.zip <(hostname)  <(ls /)
zip --fifo $b3/20250131_this_is_a_mass_spectrometry_folder.d.Zip <(seq 10)
\f[R]
.fi
.SS Now start ZIPsFS
.IP
.nf
\f[C]
ZIPsFS   $b1 $b2 $b3 : -o allow_other  $mnt
\f[R]
.fi
.SS Browse the virtual file tree
.IP
.nf
\f[C]
Open a file browser or another terminal and  browse the files in  \[ti]/test/ZIPsFS/mnt/
\f[R]
.fi
.SS Create a file in the virtual tree
.IP
.nf
\f[C]
echo \[dq]This file will be stored in \[ti]/test/ZIPsFS/writable \[dq]> \[ti]/test/ZIPsFS/mnt/my_file.txt

cat \[ti]/test/ZIPsFS/mnt/my_file.txt
\f[R]
.fi
.SS Real storage place of the created file
.IP
.nf
\f[C]
ls -l \[ti]/test/ZIPsFS/writable/my_file.txt
\f[R]
.fi
.SH DESCRIPTION
.SS Summary
.PP
ZIPsFS functions as a union or overlay file system, merging multiple
file structures into a unified directory.
This directory presents the underlying files and subdirectories from the
specified sources (branches) as a single, cohesive structure.
Any newly created or modified files are stored in the first file
location, while all other sources remain read-only, ensuring that their
files are never altered.
ZIPsFS treats ZIP files as expandable folders, typically naming them by
appending \[lq].Contents/\[rq] to the original ZIP file name.
However, this behavior can be customized using filename-based rules.
Extensive configuration options allow adjustments.
Changes can be applied without disrupting the file system.
Additionally, ZIPsFS includes specialized features and performance
optimizations tailored for efficiently storing large-scale mass
spectrometry data.
.SS Logs
.PP
ZIPsFS is normally running in the foreground.
It is recommended to use a persistent terminal multiplexer like
\f[I]tmux\f[R].
This allows to observe all messages and to search back in the scroll
buffer.
.PP
In addition, log files are found in \f[B]\[ti]/.ZIPsFS/\f[R].
.PP
An HTML file with status information is dynamically generated in the
generated folder \f[B]/ZIPsFS/\f[R] in the virtual ZIPsFS file system.
.SS Configuration
.PP
The default behavior can be customized using filename-based rules.
Configuration files, identified by the prefix ZIPsFS_configuration, are
written in C.
Any changes require recompilation and a restart of ZIPsFS to take
effect.
.PP
With the -s option, the updated ZIPsFS can seamlessly replace running
instances without disrupting the virtual file system.
.PP
To illustrate how this works, let MNT represent the apparent mount point
of the FUSE file system.
Suppose we are in the parent directory of MNT, enabling the use of
relative paths.
Users access files through this apparent mount point, but in reality,
MNT is a symbolic link to the actual mount point.
The real mount point is not directly accessed by users, as it changes
each time a new instance of ZIPsFS is launched.
.PP
For example, assume the obsolete ZIPsFS instance is mounted at
\&./.mountpoints/MNT/1.
When a new instance replaces it, it may use any empty directory as mount
point and the option:
.IP
.nf
\f[C]
-s MNT
\f[R]
.fi
.PP
Once the new instance is running, the symbolic link is updated to point
to the new mount location.
From the user\[cq]s perspective, nothing changes - the apparent mount
point remains MNT.
To ensure uninterrupted access, the obsolete instance should remain
active for a short period to allow ongoing file operations to complete.
.PP
If MNT is within an exported SAMBA or NFS path the real mount points
should be in the exported file tree as well.
Include into \f[I]/etc/samba/smb.conf\f[R]:
.IP
.nf
\f[C]
follow symlinks = yes
\f[R]
.fi
.SS Union / overlay file system
.PP
ZIPsFS is a union or overlay file system.
Several file locations are combined to one.
When files are created or modified, they will be stored in the first
file tree (in the example \f[I]\[ti]/test/ZIPsFS/writable\f[R]).
If files exist in two locations, the left most source file system takes
precedence.
.PP
If an empty string is given for the first source, no writable branch is
used.
.SS ZIP files
.PP
In the example the ZIP files are shown as folders with the suffix
\[lq]\f[I].Content\f[R]\[rq].
This can be changed in \f[I]ZIPsFS_configuration.c\f[R].
.PP
Extra rules specified:
.IP \[bu] 2
Mass spectrometry software expects folder names ending with \f[I].d\f[R]
rather than \f[I].d.Zip.Content\f[R].
This is applied to all ZIP files with a name starting with a year and
ending with .d.Zip.
.IP \[bu] 2
For example Sciex mass spectrometry software requires that the
containing files are shown directly in the file listing rather than in a
sub-folder.
.SS Cache
.PP
Optionally, ZIPsFS can read certain ZIP entries entirely into RAM and
provide the data from the RAM copy at higher speed.
This may improve performance for compressed ZIP entries that are read
from varying positions in a file, so-called file file-seek.
This is particularly important, when the ZIP files reside in a remote
file system.
With the option \f[B]-l\f[R] an upper limit of memory consumption for
the ZIP RAM cache is specified.
There are customizeable rules for how low memory is treated.
.PP
Further caches aim at faster file listing of large directories.
.SS Real file location
.PP
To see the real file path i.e.\ the file path where a file is physically
stored,
.PP
append \f[B]\[at]SOURCE.TXT\f[R] to the virtual file path.
Example:
.IP
.nf
\f[C]
cat \[ti]/test/ZIPsFS/mnt/1.txt\[at]SOURCE.TXT
\f[R]
.fi
.PP
From a Windows client, these files are not accessible.
This is because they are not listed in the parent folder.
.SS Auto-generation of virtual files
.PP
ZIPsFS can display virtual files which are generated automatically.
This feature is activated by setting the preprocessor macro
\f[B]WITH_AUTOGEN\f[R] to \f[B]1\f[R] in
\f[I]ZIPsFS_configuration.h\f[R].
The first file branch is used to store the generated files.
.PP
A typical use-case are file conversions.
The default rules in ZIPsFS_configuration_autogen.c.
comprise:
.IP \[bu] 2
For image files (jpg, jpeg, png and gif), smaller versions of 25 % and
50 %
.IP \[bu] 2
For image files extracted text usign Optical Character Recognition
.IP \[bu] 2
For PDF files extracted ASCII text
.IP \[bu] 2
For ZIP files the report of the consistency check including check-sums
.IP \[bu] 2
Mass spectrometry files: They are converted to mgf (Mascot) and msML.
For wiff files, the contained 16 bit text is converted to plain ASCII.
.IP \[bu] 2
Apache Parquet files are converted to tsv and tsv.bz2
.PP
For testing, copy an image file:
.IP
.nf
\f[C]
cp file.png \[ti]/test/ZIPsFS/mnt/
\f[R]
.fi
.PP
Auto-generated files are displayed in the virtual file tree in
\f[B]/ZIPsFS/a/\f[R].
Example:
.IP
.nf
\f[C]
ls \[ti]/test/ZIPsFS/mnt/ZIPsFS/a/
\f[R]
.fi
.PP
If they have not be used before and the real file size is still unknown,
an estimated file size is reported.
.PP
Some of the conversions require support for docker.
.SS Limitations - unknown file size
.PP
The system does not know the file size of not-yet-generated files.
This seems to be a common problem of UNIX and Linux.
See
https://fuse-devel.narkive.com/tkGi5trJ/trouble-with-samba-fuse-for-files-of-unknown-size.
Suggestions are welcome.
.PP
Initially, ZIPsFS reports an upper estimate of the expected file size.
This breaks programs that need to know the exact file size such as
\f[I]/usr/bin/tail\f[R].
.PP
How is this problem solved in the virtual file systems /proc annd /sys?
Calling stat /proc/$$/environ.
Consider
.IP
.nf
\f[C]
ls -l /proc/self/environ
\f[R]
.fi
.PP
The reported file size is zero.
Nevertheless, \f[I]cat\f[R], \f[I]more\f[R] and even \f[I]tail\f[R]
work.
Why?
If the FUSE file system returns zero for a file, the content of the
files are not readable.
Any suggested appreciated.
.SS ZIPsFS_autogen_queue.sh
.PP
Some scientific Windows executables do not behave well when started from
a compiled programs like ZIPsFS.
The problem is caused by the the Console API which replaces old fashion
terminal escape sequences.
As a work around, the shell script \f[B]ZIPsFS_autogen_queue.sh\f[R] can
be used.
ZIPsFS pushes tasks and waits for their completion when the symbol
\f[B]PLACEHOLDER_EXTERNAL_QUEUE\f[R] is given instead of an executable
program.
These tasks are performed in the shell script which need to be started
explicitly.
Several instances of this shell script can run in parallel.
.SS ZIPsFS Options
.PP
-h
.PP
Prints brief usage information.
.PP
-l \f[I]Maximum memory for caching ZIP-entries in the RAM\f[R]
.PP
Specifies a limit for the cache.
For example \f[I]-l 8G\f[R] would limit the size of the cache to 8
Gigabyte.
.PP
-c [NEVER,SEEK,RULE,COMPRESSED,ALWAYS]
.PP
Policy for ZIP entries cached in RAM.
.PP
.TS
tab(@);
cw(8.1n) lw(61.9n).
T{
NEVER
T}@T{
ZIP are never cached, even not in case of backward seek.
T}
T{
T}@T{
T}
T{
SEEK
T}@T{
ZIP entries are cached when the file position jumps backward.
This is the default
T}
T{
T}@T{
T}
T{
RULE
T}@T{
ZIP entries are cached according to rules in \f[B]configuration.c\f[R].
T}
T{
T}@T{
T}
T{
COMPRESSED
T}@T{
All compressed ZIP entries are cached.
T}
T{
T}@T{
T}
T{
ALWAYS
T}@T{
All ZIP entries are cached.
T}
T{
T}@T{
T}
.TE
.PP
-s \f[I]path-of-symbolic-link\f[R]
.PP
This is explained in section Configuration.
.PP
-b Run in background.
Not recommended.
.SS Debug Options
.PP
See ZIPsFS.compile.sh for activation of sanitizers.
.PP
-T Checks the capability to print a backtrace.
This requires addr2line which is usually in /usr/bin/ of Linux and
FreeBSD.
For MacOSX, the tool atos is used.
.SS FUSE Options
.PP
-s
.PP
Disable multi-threaded operation to rescue ZIPsFS in case of threading
related bugs.
.PP
-o \f[I]comma separated Options\f[R]
.PP
-o allow_other
.PP
Other users can read the files
.SS Fault management
.PP
When source file structures are stored remotely, there is a risk that
they may be temporarily unavailable.
Overlay file systems typically freeze when calls to the file API block.
Conversely, ZIPsFS should continue to operate with the remaining file
branches.
This is implemented as follows for paths starting with double slash (in
the example \f[I]//computer1/pub\f[R]).
Double slash indicates remote paths which might get unavailable in
analogy to remote UNC paths.
ZIPsFS will periodically check file systems starting with a double
slash.
If the last responds was too long ago then the respective file system is
skipped.
Furthermore the stat() function to obtain the attributes for a file are
queued to be performed in extra threads.
.PP
For files which are located in ZIP files and which are first loaded
entirely into RAM, the system is also robust for interruptions and
blocks during loading.
The system will not freeze.
After some longer time it will try to load the same file from another
branch or return ENOENT.
.PP
If loading of ZIP files fail, loading will be repeated after 1s.
.PP
For ZIP entries loaded entirely into the RAM, the CRC sum is validated
and possible errors are logged.
.SH LIMITATIONS
.SS Hard-links
.PP
Hard-links are not implemented, while symlinks work.
.SS Deleting files
.PP
Files can only be deleted when their physical location is in the first
source.
Conversely, in the FUSE file systems unionfs-fuse and fuse-overlayfs,
files can be always deleted irrespectively of their physical location.
They are canceled out without actually deleting them from their physical
location.
If you need the same behaviour please drop a request-for-feature.
.SS Reading and writing
.PP
Simultaneous Reading and writing of files with the same file descriptor
will only work for files exclusively in the writable source.
.SH BUGS
.PP
Current status: Testing and Bug fixing If ZIPsFS crashes, please send
the stack-trace together with the version number.
.SH AUTHOR
.PP
Christoph Gille
.SH SEE ALSO
.IP \[bu] 2
https://github.com/openscopeproject/ZipROFS
.IP \[bu] 2
https://github.com/google/fuse-archive
.IP \[bu] 2
https://bitbucket.org/agalanin/fuse-zip/src
.IP \[bu] 2
https://github.com/google/mount-zip
.IP \[bu] 2
https://github.com/cybernoid/archivemount
.IP \[bu] 2
https://github.com/mxmlnkn/ratarmount
