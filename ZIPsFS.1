'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "ZIPsFS" "1" "" "" ""
.hy
.SH NAME
.PP
\f[B]ZIPsFS\f[R] - FUSE-based overlay union file system expanding ZIP
files
.SS SYNOPSIS
.IP
.nf
\f[C]
ZIPsFS [ZIPsFS-options] path-of-branch1/  branch2/  branch3/  branch4/  :  [fuse-options] mount-point
\f[R]
.fi
.PP
ZIPsFS is best run in a tmux session.
With a trailing slash, the folder name is not part of the virtual path,
in accordance with the trailing slash semantics of many UNIX tools.
.SS Summary
.PP
ZIPsFS functions as a union or overlay file system, merging multiple
file structures into a unified directory.
This directory presents the underlying files and subdirectories from the
specified sources (branches) as a single, cohesive structure.
Any newly created or modified files are stored in the first file
location, while all other sources remain read-only, ensuring that their
files are never altered.
ZIPsFS treats ZIP files as expandable folders, typically naming them by
appending \[lq].Contents/\[rq] to the original ZIP file name.
However, this behavior can be customized using filename-based rules.
Extensive configuration options allow adjustments.
Changes can be applied without disrupting the file system.
Additionally,
.PP
ZIPsFS includes specialized features like automatic file conversions and
performance optimizations tailored for efficiently storing and accessing
large-scale mass spectrometry data.
.SS Example
.SS First create some example files
.IP
.nf
\f[C]
b1=\[ti]/test/ZIPsFS/writable/
b2=\[ti]/test/ZIPsFS/branch1/
b3=\[ti]/test/ZIPsFS/branch2/
b4=\[ti]/test/ZIPsFS/branch3
\f[R]
.fi
.PP
Without trailing slash, the folder name will be retained in the virtual
path.
This is the case for ~branch3~.
Virtual file paths in that branch will start with ~/branch3/~.
.IP
.nf
\f[C]
mnt=\[ti]/test/ZIPsFS/mnt

mkdir -p $b1 $b2 $b3 $b4 $mnt

for c in a b c d e f; do echo hello world $c >$b2/$c.txt; done
for ((i=0;i<10;i++)); do echo hello world $i >$b3/$i.txt; done

zip --fifo $b2/zipfile1.zip <(date)  <(echo $RANDOM)
zip --fifo $b3/zipfile2.zip <(hostname)  <(ls /)
zip --fifo $b3/20250131_this_is_a_mass_spectrometry_folder.d.Zip   <(seq 10)
\f[R]
.fi
.SS Start ZIPsFS
.PP
It is recommended to start ZIPsFS in tmux.
For testing, just use your terminal emulator.
.IP
.nf
\f[C]
ZIPsFS   $b1 $b2 $b3 $b4 : -o allow_other  $mnt
\f[R]
.fi
.SS Browse the virtual file tree
.PP
Open a file browser or another terminal and browse the files in
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/mnt/
\f[R]
.fi
.SS Create a file in the virtual tree
.PP
The first file tree stores files.
All others are read-only.
.IP
.nf
\f[C]
echo \[dq]This file will be stored in \[ti]/test/ZIPsFS/writable \[dq]> \[ti]/test/ZIPsFS/mnt/my_file.txt

cat \[ti]/test/ZIPsFS/mnt/my_file.txt
\f[R]
.fi
.SS Real storage place of the file
.PP
Just append \[at]SOURCE.TXT
.IP
.nf
\f[C]
cat \[ti]/test/ZIPsFS/mnt/my_file.txt\[at]SOURCE.TXT
\f[R]
.fi
.SH DESCRIPTION
.SS ZIPsFS is a Union / overlay file system
.PP
ZIPsFS functions as a union (overlay) file system.
When files are created or modified, they are stored in the first file
tree - e.g.,
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/writable
\f[R]
.fi
.PP
in the example setup.
If a file exists in multiple source locations, the version from the
leftmost source (the first one listed) takes precedence.
To make the file system read-only, you can specify an empty string
(\[lq]\[lq]) as the first source.
This disables file creation and modification and automatic virtual file
generation.
.PP
The physical file path, i.e., the actual storage location of a file, can
be retrieved from a special metadata file created by appending
\f[B]\f[BI]\[at]SOURCE.TXT\f[B]\f[R] to the filename.
.PP
For example, to determine the real location of:
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/mnt/1.txt
\f[R]
.fi
.PP
Run the following command:
.IP
.nf
\f[C]
cat \[ti]/test/ZIPsFS/mnt/1.txt\[at]SOURCE.TXT
\f[R]
.fi
.SS ZIPsFS expands ZIP file entries
.PP
By default, ZIP files are displayed as folders with the suffix
\f[B]\f[BI].Content\f[B]\f[R].
This behavior can be customized.
The default configuration includes a few exceptions tailored to specific
use cases in Mass Spectrometry Compatibility:
.IP \[bu] 2
For ZIP files whose names start with a year and end with
\f[I].d.Zip\f[R], the virtual folder will instead end with \f[I].d\f[R].
.IP \[bu] 2
Flat File Display: For some mass spectrometry formats where files are
not organized into subfolders within the ZIP archive, the contents are
shown directly in the file list, rather than as a nested folder.
.SS ZIPsFS Options
.PP
\f[B]-h\f[R]
.PP
Prints brief usage information.
.PP
\f[B]-s \f[BI]path-of-symbolic-link\f[B]\f[R] This is discussed in
section Configuration.
.PP
\f[B]-c [NEVER,SEEK,RULE,COMPRESSED,ALWAYS]\f[R]
.PP
Policy for ZIP entries cached in RAM.
.PP
.TS
tab(@);
cw(8.1n) lw(61.9n).
T{
NEVER
T}@T{
ZIP entries are never cached, even not in case of backward seek.
T}
T{
T}@T{
T}
T{
SEEK
T}@T{
ZIP entries are cached when the file position jumps backward.
This is the default
T}
T{
T}@T{
T}
T{
RULE
T}@T{
ZIP entries are cached according to customizable rules
T}
T{
T}@T{
T}
T{
COMPRESSED
T}@T{
All compressed ZIP entries are cached.
T}
T{
T}@T{
T}
T{
ALWAYS
T}@T{
All ZIP entries are cached.
T}
T{
T}@T{
T}
.TE
.PP
\f[B]-l \f[BI]Maximum memory for caching ZIP-entries in the
RAM\f[B]\f[R]
.PP
Specifies a limit for the cache.
For example \f[I]-l 8G\f[R] would limit the size of the cache to 8
Gigabyte.
.PP
\f[B]-b\f[R] Run in background
.SS FUSE Options
.PP
These come after the colon in the command line.
.PP
\f[B]-s\f[R]
.PP
Disable multi-threaded operation.
This could rescue ZIPsFS in case of threading related bugs.
.PP
\f[B]-o \f[BI]comma separated Options\f[B]\f[R]
.PP
\f[B]-o allow_other\f[R] Other users are granted access.
.SH Project status
.PP
Author: Christoph Gille
.PP
Current status: Testing and Bug fixing.
Already running very busy for several weeks without interruption.
.PP
If ZIPsFS crashes, please send the stack-trace together with the source
code you were using.
