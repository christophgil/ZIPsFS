'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
% ZIPsFS(1)
.SH NAME
.PP
\f[B]ZIPsFS\f[R] \[em] FUSE-based overlay union file system expanding
ZIP files
.SH SYNOPSIS
.PP
ZIPsFS [\f[I]ZIPsFS-options\f[R]] \f[I]path-of-root1\f[R]
\f[I]path-of-root2\f[R] \f[I]path-of-root3\f[R] :
[\f[I]fuse-options\f[R]] \f[I]mount-point\f[R]
.SS Example 1
.PP
ZIPsFS \[ti]/tmp/ZIPsFS/writable \[ti]/local/file/tree //computer1/pub
//computer2/pub : -f -o allow_other \[ti]/mnt/ZIPsFS
.SH DESCRIPTION
.SS Summary
.PP
ZIPsFS acts as a union or overlay file system.
It combines multiple file structures into one, resulting in a single
directory structure that contains underlying files and sub-directories
from the given sources.
Created or modified files are stored in the first file location.
The other file sources are read-only and files will never be modified.
ZIPsFS expands ZIP files as folders.
Normally, the folder name is formed from the ZIP file name by appending
\[lq].Contents/\[rq].
This can be changed with rules based on file name patterns.
Extensive configuration is possible without interrupting the file
system.
Specific features and performance tweaks meet our needs for storing
large data from mass spectrometry experiments.
.SS Configuration
.PP
The default behavior can be modified with rules based on file names in
\f[I]ZIPsFS_configuration.h\f[R] and \f[I]ZIPsFS_configuration.c\f[R].
For changes to take effect, re-compilation and restart is necessary.
Using the \f[I]-s symlink\f[R] option, the configuration can be changed
without interrupting the file system.
Ongoing computations with file access to the ZIPsFS are not affected.
.SS Union / overlay file system
.PP
ZIPsFS is a union or overlay file system.
Several file locations are combined to one.
All files in the source file trees (in above example command three
sources) can be accessed via the mount point (in the example
\f[I]~/mnt/ZIPsFS\f[R]).
When files are created or modified, they will be stored in the first
file tree (in the example \f[I]~/tmp/ZIPsFS/writable\f[R]).
If files exist in two locations, the left most source file system takes
precedence.
.PP
New files are created in the first file tree, while the other file
sources are never modified.
If an empty string \[lq]\[rq] or \[cq]\[cq] is given for the first
source, no writable source is used.
.SS ZIP files
.PP
Let \f[I]file.zip\f[R] be a ZIP file in any of the source file systems.
It will appear in the virtual file system together with a folder
\f[I]file.zip.Content\f[R].
Normally, the folder name is formed by appending
\[lq]\f[I].Content\f[R]\[rq] to the zip file name.
This can be changed in \f[I]ZIPsFS_configuration.c\f[R].
.PP
For example Sciex mass spectrometry software requires that the
containing files are shown directly in the file listing rather than in a
sub-folder.
Bruker mass spectrometry software expects folder names ending with
\f[I].d\f[R] rather than \f[I].d.Zip.Content\f[R].
.SS Cache
.PP
Optionally, ZIPsFS can read certain ZIP entries entirely into RAM and
provide the data from the RAM copy at higher speed.
This may improve performance for compressed ZIP entries that are read
from varying positions in a file, so-called file file-seek.
This is particularly important, when the ZIP files reside in a remote
file system.
With the option \f[B]-l\f[R] an upper limit of memory consumption for
the ZIP RAM cache is specified.
There are customizeable rules for the case that the limit is reached.
.PP
Further caches aim at faster file listing of large directories.
A file listing of the Sciex style where all ZIP entries of many ZIP
files are shown would require to read the entry index of many ZIP files
which takes about 15 ms per ZIP file.
A file listing of several thousands of files would take several seconds
without a cache.
.PP
When the cache size exceeds a limit, it is cleared.
.SS Logs
.PP
It is convenient to run ZIPsFS in the foreground with option
\f[I]-f\f[R] within a persistent terminal multiplexer like
\f[I]tmux\f[R].
This allows to observe all messages and to search back in the scroll
buffer.
.PP
In addition, log files are found in \f[B]\[ti]/.ZIPsFS/\f[R].
.PP
An HTML file with status information is dynamically generated in the
generated folder \f[B]/ZIPsFS/\f[R] in the virtual ZIPsFS file system.
.SS Real file location
.PP
To see the real file path i.e.\ the file path where a file is physically
stored, append \f[B]\[at]SOURCE.TXT\f[R] to the virtual file path.
From a Windows client, these files are not accessible.
In Windows, files are generally not accessible, when they are not listed
in the parent folder.
.SS Plugins - Auto-generation of virtual files
.PP
ZIPsFS can display virtual files which do not exist, but which are
generated automatically when used.
This feature is activated when \f[B]WITH_AUTOGEN\f[R] is set to
\f[B]1\f[R] in \f[I]ZIPsFS_configuration.h\f[R].
The first file root may be used to store the generated files.
Alternatively, the file data is computed and kept in RAM for the time of
file access.
.PP
A typical use-case are file conversions.
Auto-generated files are displayed in the virtual file tree in
\f[B]/ZIPsFS/a/\f[R].
If they have not be used before, an estimated file size is reported as
the real file size is not yet known.
.PP
The currently included examples demonstrate this feature and can serve
as a templated for own settings.
.PP
For this purpose copy image or pdf files into one of the roots and visit
the respective folder in the virtual file system.
Prepend this folder with \f[B]/ZIPsFS/a/\f[R] and you will see the
generated files:
.IP
.nf
\f[C]
mnt=<path of mountpoint>

mkdir $mnt/test

cp file.png $mnt/test/

ls -l $mnt/ZIPsFS/a/test/
\f[R]
.fi
.IP \[bu] 2
For image files (jpg, jpeg, png and gif), smaller versions of 25 % and
50 %
.IP \[bu] 2
For image files extracted text usign Optical Character Recognition
.IP \[bu] 2
For PDF files extracted ASCII text
.IP \[bu] 2
For ZIP files the report of the consistency check including check-sums
.IP \[bu] 2
Mass spectrometry files: They are converted to mgf (Mascot) and msML.
For wiff files, the contained 16 bit text is converted to plain ASCII.
.IP \[bu] 2
Apache Parquet files are converted to tsv and tsv.bz2
.PP
When opening these files for the first time there will be some delay.
The same is true when their last-modified time changes.
This is because the files need to be generated.
When accessed a second time, the data comes without delay, because the
file is already there.
Furthermore, the file size will be correct.
.PP
Users can customize the rules in ZIPsFS_configuration_autogen.c.
Some of the conversions require support for docker.
.SS Limitations - unknown file size
.PP
The system does not know the file size of not-yet-generated files.
This seems to be a common problem, see
https://fuse-devel.narkive.com/tkGi5trJ/trouble-with-samba-fuse-for-files-of-unknown-size.
Any help is appreciated.
.PP
Initially, ZIPsFS reports an upper estimate of the expected file size.
This breaks programs that need to know the exact file size such as
\f[I]/usr/bin/tail\f[R].
.PP
How is this problem solved in the virtual file systems /proc annd /sys?
Calling stat /proc/$$/environ.
Consider
.IP
.nf
\f[C]
ls -l /proc/self/environ
\f[R]
.fi
.PP
The reported file size is zero.
Nevertheless, \f[I]cat\f[R], \f[I]more\f[R] and even \f[I]tail\f[R]
work.
If the FUSE file system returns zero for a file, the content of the
files are not readable.
Any suggested appreciated.
.SS Limitations - nested, recursive
.PP
Currently, nesting (recursion) is not yet supported.
A virtual file cannot be the basis for another virtual file.
.SS ZIPsFS_autogen_queue.sh
.PP
Some exotic scientific Windows executables cannot be started from a
compiled program like ZIPsFS.
The problem is that the Console API is used instead of terminal escape
sequences.
As a work around, we developed the shell script
\f[B]ZIPsFS_autogen_queue.sh\f[R].
With each pass of an infinity loop one task is taken from a queue and
processed.
One file is converted at a time per script instance.
Several instances of this shell script can run in parallel.
In the settings, the symbol \f[B]PLACEHOLDER_EXTERNAL_QUEUE\f[R] is
given instead of an executable program.
.SS ZIPsFS Options
.PP
-h
.PP
Prints brief usage information.
.PP
-l \f[I]Maximum memory for caching ZIP-entries in the RAM\f[R]
.PP
Specifies a limit for the cache.
For example \f[I]-l 8G\f[R] would limit the size of the cache to 8
Gigabyte.
.PP
-c [NEVER,SEEK,RULE,COMPRESSED,ALWAYS]
.PP
Policy for ZIP entries cached in RAM.
.PP
.TS
tab(@);
cw(8.1n) lw(61.9n).
T{
NEVER
T}@T{
ZIP are never cached, even not in case of backward seek.
T}
T{
T}@T{
T}
T{
SEEK
T}@T{
ZIP entries are cached when the file position jumps backward.
This is the default
T}
T{
T}@T{
T}
T{
RULE
T}@T{
ZIP entries are cached according to rules in \f[B]configuration.c\f[R].
T}
T{
T}@T{
T}
T{
COMPRESSED
T}@T{
All compressed ZIP entries are cached.
T}
T{
T}@T{
T}
T{
ALWAYS
T}@T{
All ZIP entries are cached.
T}
T{
T}@T{
T}
.TE
.PP
-s \f[I]path-of-symbolic-link\f[R]
.PP
After initialization the specified symlink is created and points to the
mount point.
Previously existing links are overwritten atomically.
This allows to restart ZIPsFS without affecting running programs which
access file in the virtual ZIPsFS file system.
For file paths in the virtual file system, the symlink is used rather
than the real mount-point.
Consider a running ZIPsFS instance which needs to be replaced by a newer
one.
The new ZIPsFS instance is started with a different mount point.
Both instances work simultaneously.
The symlink which used to point to the mount point of the old instance
is now pointing to that of the new one.
The old instance should be let running for an hour or so until no file
handle is open any more.
.PP
If the symlink is within an exported SAMBA or NFS path, it should be
relative.
This is best achieved by changing into the parent path where the symlink
will be created.
Then give just the name and not the entire path of the symlink.
In the /etc/samba/smb.conf give:
.PP
follow symlinks = yes
.SS Debug Options
.PP
See ZIPsFS.compile.sh for activation of sanitizers.
.PP
-T Checks the capability to print a backtrace.
This requires addr2line which is usually in /usr/bin/ of Linux and
FreeBSD.
For MacOSX, the tool atos is used.
.SS FUSE Options
.PP
-f
.PP
Run in foreground and display some logs at stdout.
This mode is useful inside tmux.
.PP
-s
.PP
Disable multi-threaded operation to rescue ZIPsFS in case of threading
related bugs.
.PP
-o \f[I]comma separated Options\f[R]
.PP
-o allow_other
.PP
Other users can read the files
.SS Fault management
.PP
When source file structures are stored remotely, there is a risk that
they may be temporarily unavailable.
Overlay file systems typically freeze when calls to the file API block.
Conversely, ZIPsFS should continue to operate with the remaining file
roots.
This is implemented as follows for paths starting with double slash (in
the example \f[I]//computer1/pub\f[R]).
Double slash indicates remote paths which might get unavailable in
analogy to remote UNC paths.
ZIPsFS will periodically check file systems starting with a double
slash.
If the last responds was too long ago then the respective file system is
skipped.
Furthermore the stat() function to obtain the attributes for a file are
queued to be performed in extra threads.
.PP
For files which are located in ZIP files and which are first loaded
entirely into RAM, the system is also robust for interruptions and
blocks during loading.
The system will not freeze.
After some longer time it will try to load the same file from another
root or return ENOENT.
.PP
If loading of ZIP files fail, loading will be repeated after 1s.
.PP
For ZIP entries loaded entirely into the RAM, the CRC sum is validated
and possible errors are logged.
.SH FILES
.IP \[bu] 2
ZIPsFS_configuration.h and ZIPsFS_configuration.c and
ZIPsFS_configuration_autogen.c: Customizable rules.
Modification requires recompilation.
.IP \[bu] 2
\[ti]/.ZIPsFS: Contains the log file and cache and the folder a.
The later holds auto-generated files.
.SH LIMITATIONS
.SS Hard-links
.PP
Hard-links are not implemented, while symlinks work.
.SS Deleting files
.PP
Files can only be deleted when their physical location is in the first
source.
Conversely, in the FUSE file systems unionfs-fuse and fuse-overlayfs,
files can be always deleted irrespectively of their physical location.
They are canceled out without actually deleting them from their physical
location.
If you need the same behaviour please drop a request-for-feature.
.SS Reading and writing
.PP
Simultaneous Reading and writing of files with the same file descriptor
will only work for files exclusively in the writable source.
.SH BUGS
.PP
Current status: Testing and Bug fixing If ZIPsFS crashes, please send
the stack-trace together with the version number.
.SH AUTHOR
.PP
Christoph Gille
.SH SEE ALSO
.IP \[bu] 2
https://github.com/openscopeproject/ZipROFS
.IP \[bu] 2
https://github.com/google/fuse-archive
.IP \[bu] 2
https://bitbucket.org/agalanin/fuse-zip/src
.IP \[bu] 2
https://github.com/google/mount-zip
.IP \[bu] 2
https://github.com/cybernoid/archivemount
.IP \[bu] 2
https://github.com/mxmlnkn/ratarmount
