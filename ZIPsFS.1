'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
% ZIPsFS(1)
.SH NAME
.PP
\f[B]ZIPsFS\f[R] - FUSE-based overlay union file system expanding ZIP
files
.SH SYNOPSIS
.IP
.nf
\f[C]
ZIPsFS \[rs][*ZIPsFS-options*\[rs]] *path-of-branch1* *path-of-branch2*  *path-of-branch3*   :  \[rs][*fuse-options*\[rs]] *mount-point*
\f[R]
.fi
.SS Example
.SS First create some example files
.IP
.nf
\f[C]
b1=\[ti]/test/ZIPsFS/writable
b2=\[ti]/test/ZIPsFS/branch1
b3=\[ti]/test/ZIPsFS/branch2
mnt=\[ti]/test/ZIPsFS/mnt

mkdir -p $b1 $b2 $b3 $mnt

for c in a b c d e f; do echo hello world $c >$b2/$c.txt; done
for ((i=0;i<10;i++)); do echo hello world $i >$b3/$i.txt; done

zip --fifo $b2/zipfile1.zip <(date)  <(date \[aq]+%Y-%M-%d %H:%m %S\[aq])
zip --fifo $b3/zipfile2.zip <(hostname)  <(ls /)
zip --fifo $b3/20250131_this_is_a_mass_spectrometry_folder.d.Zip <(seq 10)
\f[R]
.fi
.SS Now start ZIPsFS
.IP
.nf
\f[C]
ZIPsFS   $b1 $b2 $b3 : -o allow_other  $mnt
\f[R]
.fi
.SS Browse the virtual file tree
.PP
Open a file browser or another terminal and browse the files in
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/mnt/
\f[R]
.fi
.SS Create a file in the virtual tree
.IP
.nf
\f[C]
echo \[dq]This file will be stored in \[ti]/test/ZIPsFS/writable \[dq]> \[ti]/test/ZIPsFS/mnt/my_file.txt

cat \[ti]/test/ZIPsFS/mnt/my_file.txt
\f[R]
.fi
.SS Real storage place of the created file
.IP
.nf
\f[C]
ls -l \[ti]/test/ZIPsFS/writable/
\f[R]
.fi
.SH DESCRIPTION
.SS Summary
.PP
ZIPsFS functions as a union or overlay file system, merging multiple
file structures into a unified directory.
This directory presents the underlying files and subdirectories from the
specified sources (branches) as a single, cohesive structure.
Any newly created or modified files are stored in the first file
location, while all other sources remain read-only, ensuring that their
files are never altered.
ZIPsFS treats ZIP files as expandable folders, typically naming them by
appending \[lq].Contents/\[rq] to the original ZIP file name.
However, this behavior can be customized using filename-based rules.
Extensive configuration options allow adjustments.
Changes can be applied without disrupting the file system.
Additionally, ZIPsFS includes specialized features and performance
optimizations tailored for efficiently storing large-scale mass
spectrometry data.
.SS Logs
.IP
.nf
\f[C]
 \[ti]/.ZIPsFS

 \[ti]/test/ZIPsFS/mnt/ZIPsFS/file_system_info.html
\f[R]
.fi
.PP
ZIPsFS typically runs as a foreground process.
To keep it active and monitor its output, it is recommended to use a
persistent terminal multiplexer such as tmux.
This enables continuous observation of all messages and facilitates
long-running sessions.
Additional log files are stored in:
.IP
.nf
\f[C]
\[ti]/.ZIPsFS
\f[R]
.fi
.PP
ZIPsFS dynamically generates an HTML status file within the virtual file
system.
You can find it under the path: /ZIPsFS/ For example:
.IP
.nf
\f[C]
/mnt/myzip/ZIPsFS/status.html
\f[R]
.fi
.PP
This file provides real-time information about the system\[cq]s current
state.
.SS Configuration
.PP
Configuration files, identified by the prefix ZIPsFS_configuration, are
written in C.
Any changes require recompilation and a restart of ZIPsFS to take
effect.
.PP
With the -s option, the updated ZIPsFS can seamlessly replace running
instances without disrupting the virtual file system.
.PP
To illustrate how this works, let MNT represent the apparent mount point
of the FUSE file system.
Suppose we are in the parent directory of MNT, enabling the use of
relative paths.
Users access files through this apparent mount point, but in reality,
MNT is a symbolic link to the actual mount point.
The real mount point is not directly accessed by users, as it changes
each time a new instance of ZIPsFS is launched.
.PP
For example, assume the obsolete ZIPsFS instance is mounted at
\&./.mountpoints/MNT/1.
When a new instance replaces it, it may use any empty directory as mount
point and the option:
.IP
.nf
\f[C]
-s MNT
\f[R]
.fi
.PP
Once the new instance is running, the symbolic link is updated to point
to the new mount location.
From the user\[cq]s perspective, nothing changes - the apparent mount
point remains MNT.
To ensure uninterrupted access, the obsolete instance should remain
active for a short period to allow ongoing file operations to complete.
.PP
If MNT is within an exported SAMBA or NFS path the real mount points
should be in the exported file tree as well.
Include into \f[I]/etc/samba/smb.conf\f[R]:
.IP
.nf
\f[C]
follow symlinks = yes
\f[R]
.fi
.SS Union / overlay file system
.PP
ZIPsFS functions as a union (overlay) file system.
When files are created or modified, they are stored in the first file
tree - e.g.,
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/writable
\f[R]
.fi
.PP
in the example setup.
If a file exists in multiple source locations, the version from the
leftmost source (the first one listed) takes precedence.
To make the file system read-only, you can specify an empty string
(\[lq]\[lq]) as the first source.
This disables file creation and modification.
.SS ZIP file Presentation
.PP
By default, ZIP files are displayed as folders with the suffix
\f[I].Content\f[R].
This behavior can be customized in the ZIPsFS_configuration.c file.
The default configuration includes a few exceptions tailored to specific
use cases in Mass Spectrometry Compatibility:
.IP \[bu] 2
For ZIP files whose names start with a year and end with .d.Zip, the
virtual folder will instead end with \f[I].d\f[R].
.IP \[bu] 2
Flat File Display: For some mass spectrometry formats where files are
not organized into subfolders within the ZIP archive, the contents are
shown directly in the file list, rather than as a nested folder.
.SS File content cache
.PP
ZIPsFS optionally supports caching specific ZIP entries entirely in RAM,
allowing data segments to be served from memory in any order.
This feature significantly improves performance for software that
performs random-access reads.
The \f[I]-l\f[R] option sets an upper limit on memory usage for the ZIP
RAM cache.
When available memory runs low, ZIPsFS can either pause, proceed without
caching file data or just ignore the memory restriction depending on the
configuration.
These caching behaviors - such as which files to cache and how to handle
memory pressure - are defined in the configuration files based on.
.SS File attribute cache
.PP
Additional caching mechanisms are designed to accelerate file listing in
large directories.
.SS Real file location
.PP
The physical file path, i.e., the actual storage location of a file, can
be retrieved from a special metadata file created by appending
\[at]SOURCE.TXT to the filename.
.PP
For example, to determine the real location of:
.IP
.nf
\f[C]
\[ti]/test/ZIPsFS/mnt/1.txt
\f[R]
.fi
.PP
Run the following command:
.IP
.nf
\f[C]
cat \[ti]/test/ZIPsFS/mnt/1.txt\[at]SOURCE.TXT
\f[R]
.fi
.PP
Unfortunately, on Windows clients, these metadata files are inaccessible
because they do not appear in directory listings.
.SS Automatic Virtual File Generation and Conversion Rules
.PP
ZIPsFS can generate and display virtual files automatically.
This feature is enabled by setting the preprocessor macro
\f[B]WITH_AUTOGEN\f[R] to \f[B]1\f[R] in
\f[I]ZIPsFS_configuration.h\f[R].
Generated files are stored in the first file branch, allowing them to be
served instantly upon repeated requests.
A common use case for this feature is file conversion.
The default rules, defined in \f[I]ZIPsFS_configuration_autogen.c\f[R],
include:
.IP \[bu] 2
\f[B]Image files (JPG, JPEG, PNG, GIF):\f[R] Smaller versions at 25% and
50% scaling.
.IP \[bu] 2
\f[B]Image files (OCR):\f[R] Extracted text using Optical Character
Recognition (OCR).
.IP \[bu] 2
\f[B]PDF files:\f[R] Extracted ASCII text.
.IP \[bu] 2
\f[B]ZIP files:\f[R] Consistency check reports, including checksums.
.IP \[bu] 2
\f[B]Mass spectrometry files:\f[R] \f[B]mgf (Mascot)\f[R] and
\f[B]msML\f[R] formats.
.IP \[bu] 2
\f[B]wiff files:\f[R] Extract ASCII text.
.IP \[bu] 2
\f[B]Apache Parquet files:\f[R] \f[B]TSV\f[R] and \f[B]TSV.BZ2\f[R]
formats.
.PP
For testing, copy an image file with the following command:
.IP
.nf
\f[C]
cp file.png \[ti]/test/ZIPsFS/mnt/
\f[R]
.fi
.PP
Auto-generated files can be viewed in the example configuration by
listing the contents of:
.IP
.nf
\f[C]
ls \[ti]/test/ZIPsFS/mnt/ZIPsFS/a/
\f[R]
.fi
.PP
Note that some of the conversions may require Docker support.
.SS Handling Unknown File Sizes in Virtual File Systems
.PP
The system cannot determine the size of files whose content has not yet
been generated.
In kernel-managed virtual file systems such as \f[I]/proc\f[R] and
\f[I]/sys\f[R], virtual files typically report a size of zero via
\f[I]stat()\f[R].
Despite this, they often contain dynamically generated content when
read.
.PP
However, this behavior does not translate well to FUSE-based file
systems.
.PP
For FUSE, returning a file size of zero to represent an unknown or
dynamic size is not recommended.
Many programs interpret a size of 0 as an empty file and will not
attempt to read from it at all.
In ZIPsFS a placeholder or estimated size is returned if the file
content has not been generated at the time of stat().
The estimate should be large enough to allow reading the full content.
If the size is underestimated, data may be read incompletely, leading to
truncated output or application errors.
This workaround allows programs to read the file as if it had content,
even though the size isn\[cq]t known in advance.
However, it may still break software that relies on accurate size
reporting for buffering or memory allocation.
.SS Windows Console Compatibility: External Queue Workaround
.PP
Some Windows command-line executables do not behave reliably when
launched directly from compiled programs.
This issue stems from limitations in the Windows Console API, which
differs from traditional terminal escape sequences and can interfere
with expected output or behavior.
To work around this, ZIPsFS supports delegating such tasks to an
external shell script.
When the special symbol \f[B]PLACEHOLDER_EXTERNAL_QUEUE\f[R] is
specified instead of a direct executable path, ZIPsFS:
.IP \[bu] 2
Pushes the task details to a queue.
.IP \[bu] 2
Waits for the result.
.PP
The actual execution of these tasks is handled by the shell script
ZIPsFS_autogen_queue.sh, which must be started manually by the user.
This script polls the queue and performs the requested conversions or
operations.
Multiple instances of the script can run in parallel, allowing
concurrent task handling.
.SS ZIPsFS Options
.PP
-h
.PP
Prints brief usage information.
.PP
-l \f[I]Maximum memory for caching ZIP-entries in the RAM\f[R]
.PP
Specifies a limit for the cache.
For example \f[I]-l 8G\f[R] would limit the size of the cache to 8
Gigabyte.
.PP
-c [NEVER,SEEK,RULE,COMPRESSED,ALWAYS]
.PP
Policy for ZIP entries cached in RAM.
.PP
.TS
tab(@);
cw(8.1n) lw(61.9n).
T{
NEVER
T}@T{
ZIP entries are never cached, even not in case of backward seek.
T}
T{
T}@T{
T}
T{
SEEK
T}@T{
ZIP entries are cached when the file position jumps backward.
This is the default
T}
T{
T}@T{
T}
T{
RULE
T}@T{
ZIP entries are cached according to rules in \f[B]configuration.c\f[R].
T}
T{
T}@T{
T}
T{
COMPRESSED
T}@T{
All compressed ZIP entries are cached.
T}
T{
T}@T{
T}
T{
ALWAYS
T}@T{
All ZIP entries are cached.
T}
T{
T}@T{
T}
.TE
.PP
-s \f[I]path-of-symbolic-link\f[R]
.PP
This is discussed in section Configuration.
.PP
-b Run in background.
.SS Debug Options
.PP
\f[B]-T\f[R]
.PP
Checks whether ZIPsFS can generate and print a backtrace in case of
errors or crashes.
This feature elies on external tools to translate memory addresses into
source code locations: On Linux and FreeBSD, it uses addr2line,
typically located in /usr/bin/.
On macOS, it uses the atos tool instead.
Ensure these tools are installed and accessible in your system\[cq]s
PATH for backtraces to work correctly.
.PP
See ZIPsFS.compile.sh for activation of sanitizers.
.SS FUSE Options
.PP
-s
.PP
Disable multi-threaded operation.
This could rescue ZIPsFS in case of threading related bugs.
.PP
-o \f[I]comma separated Options\f[R]
.PP
-o allow_other
.PP
Other users can read the files
.SS Fault Management for Remote File Access
.PP
Accessing remote files inherently carries a higher risk of failure.
Requests may either:
.IP \[bu] 2
Fail immediately with an error code, or
.IP \[bu] 2
Block indefinitely, causing potential hangs.
.PP
In many FUSE file systems, a blocking access can render the entire
virtual file system unresponsive.
ZIPsFS addresses this with built-in fault management for remote
branches.
.PP
Remote sources in ZIPsFS are specified using a double-slash prefix,
similar to UNC paths (//server/share/\&...).
.PP
Each remote branch is isolated in terms of fault handling and threading.
Each remote branch is assigned its own thread pool, ensuring faults in
one do not affect others.
.PP
To avoid blocking the main file system thread: Remote file operations
are executed asynchronously in dedicated worker threads.
.PP
ZIPsFS remains responsive even if a remote file access hangs.
If a thread becomes unresponsive: ZIPsFS will terminate the stalled
thread after a timeout.
A new thread is started, attempting to restore functionality to the
affected branch.
For redundantly stored files (i.e., available on multiple branches),
another branch may take over transparently if one fails or becomes
unresponsive.
.SS Data Integrity for ZIP Entries
.PP
For ZIP entries loaded entirely into RAM: ZIPsFS performs CRC checksum
validation.
Any detected inconsistencies are logged, helping to detect corruption or
transmission errors.
.SS LIMITATIONS
.SS Hard Links
.PP
Hard links are not supported, though symlinks are fully functional.
.SS Deleting Files
.PP
Files can only be deleted if their physical location resides in the
first source.
Files located in other branches are accessed in a read-only mode, and
deletion of these files would require a mechanism to remove them from
the system, which is currently not implemented.
.PP
If you require this functionality, please submit a feature request.
.SS Reading and Writing
.PP
Simultaneous reading and writing of a file using the same file
descriptor will only function correctly for files stored in the writable
source.
.SH BUGS
.PP
Current status: Testing and Bug fixing If ZIPsFS crashes, please send
the stack-trace together with the source code you were using.
.SH AUTHOR
.PP
Christoph Gille
.SH SEE ALSO
.IP \[bu] 2
https://github.com/openscopeproject/ZipROFS
.IP \[bu] 2
https://github.com/google/fuse-archive
.IP \[bu] 2
https://bitbucket.org/agalanin/fuse-zip/src
.IP \[bu] 2
https://github.com/google/mount-zip
.IP \[bu] 2
https://github.com/cybernoid/archivemount
.IP \[bu] 2
https://github.com/mxmlnkn/ratarmount
