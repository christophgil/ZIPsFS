.\"t
.\" Automatically generated by Pandoc 2.5
.\"
.TH "" "" "" "" ""
.hy
.PP
% ZIPsFS(1)
.SH NAME
.PP
\f[B]ZIPsFS\f[R] \[em] FUSE\-based overlay union file system which
expands ZIP files
.SH SYNOPSIS
.PP
ZIPsFS [\f[I]ZIPsFS\-options\f[R]] \f[I]path\-of\-root1\f[R]
\f[I]path\-of\-root2\f[R] \f[I]path\-of\-root3\f[R] :
[\f[I]fuse\-options\f[R]] \f[I]mount\-point\f[R]
.SS Example 1
.PP
ZIPsFS \-l 2GB \[ti]/tmp/ZIPsFS/writable \[ti]/local/file/tree
//computer1/pub //computer2/pub : \-f \-o allow_other
\[ti]/tmp/ZIPsFS/mnt
.SH DESCRIPTION
.SS Summary
.PP
ZIPsFS combines multiple file structures into one, resulting in a single
directory structure that contains underlying files and sub\-directories
from the given sources.
Created or modified files are stored in the first file location.
The other file sources are read\-only and files will never be modified.
ZIPsFS expands ZIP files as folders.
Normally, the folder name is formed from the ZIP file name by appending
\[lq].Contents/\[rq].
This can be changed by the administrator with rules based on file name
patterns.
It is also possible to inline the files in the ZIP files into the file
listing without the containing folder.
.SS Configuration
.PP
The default behavior can be modified with rules based on file names in
\f[I]ZIPsFS_configuration.h\f[R] and \f[I]ZIPsFS_configuration.c\f[R].
For changes to take effect, re\-compilation and restart is necessary.
Using the \f[I]\-s symlink\f[R] option, the configuration can be changed
in production.
.SS Union / overlay file system
.PP
ZIPsFS is a union or overlay file system because several file locations
are combined to one.
All files in the source file trees (in the example four) can be accessed
via the mount point (in the example \f[I]~/tmp/ZIPsFS/mnt\f[R]). When
files are created or modified, they will be stored in the first file
tree (in the example \f[I]~/tmp/ZIPsFS/writable\f[R]).
If files exist in two locations, the left most root takes precedence.
.SS Unreliable roots
.PP
When source file structures are stored remotely, there is increased risk
that they may become temporarily unavailable.
Overlay file systems typically freeze when calls to the file API block.
Conversely, ZIPsFS should continue to operate with the remaining file
roots.
This is implemented as follows: Paths starting with double slash (in the
example \f[I]//computer1/pub\f[R]) are regarded as remote paths and
treated specially.
ZIPsFS will periodically check file systems starting with a double
slash.
If the last responds was too long ago then the respective file system is
skipped.
Furthermore the stat() function to obtain the attributes for a file are
queued to be performed in extra threads.
.SS Modified and created files
.PP
New files are created in the first file tree, while the following file
trees are not modified.
If the first root is an empty string is passed as first file tree, no
files can be created and the virtual file system is read\-only.
.SS Cache
.PP
ZIPsFS can read certain ZIP entries entirely into RAM and provide the
data from the RAM copy at higher speed.
This may improve performance for compressed ZIP entries that are read
from varying positions in the file, so\-called file file\-seek.
The file entries are selected by rules based on file names and
compression in \f[I]ZIPsFS_configuration.c\f[R].
.PP
In addition, compressed ZIP entries are cached in RAM if the reading
position ever jumps backward.
.PP
With the option \f[B]\-l\f[R] an upper limit of memory consumption for
the ZIP RAM cache is specified.
.SS Logs
.PP
Running ZIPsFS in the foreground with the option \f[I]\-f\f[R], allows
to observe logs continuously at the console.
It is recommended to run it in a terminal multiplexer like
\f[I]tmux\f[R].
Log files are in \f[B]\[ti]/.ZIPsFS/\f[R] written.
An HTML file with status information is found in and are also accessible
from Mount\-point/ZIPsFS/.
.SS ZIP files
.PP
Let \f[I]file.zip\f[R] be a ZIP file in any of the root file systems.
It will appear in the virtual file system together with a folder
\f[I]file.zip.Content\f[R].
Special rules based on file name patterns can be defined whether the
contained files are shown in a sub\-folder or directly in the file
listing.
Normally, the folder name is formed by appending
\[lq]\f[I].Content\f[R]\[rq] to the zip file name.
Conversely, complex rules can be implemented in
\f[I]ZIPsFS_configuration.c\f[R].
.SS Autogeneration of files
.PP
ZIPsFS can list files which do not yet exist, however, will be generated
when used.
The typical use\-case are file conversions such as thumb images.
With the current setting, Mascot mass spectrometry files and msML files
are offered.
Auto\-generated files are found in \f[I]Mount\-point/ZIPsFS/a/\f[R].
.SS ZIPsFS Options
.TP
.B \-h
Prints brief usage information.
.TP
.B \-l \f[I]Maximum memory for caching ZIP\-entries in the RAM\f[R]
Specifies a limit for the cache.
For example \f[I]\-l 8G\f[R] would limit the size of the cache to 8
Gigabyte.
.TP
.B \-c [NEVER,SEEK,RULE,COMPRESSED,ALWAYS]
Policy when ZIP entries are cached in RAM.
.PP
.TS
tab(@);
cw(8.3n) lw(61.7n).
T{
NEVER
T}@T{
ZIP are never cached, even not in case of backward seek.
T}
T{
T}@T{
T}
T{
SEEK
T}@T{
ZIP entries are cached if the file position jumps backward.
This is the default
T}
T{
T}@T{
T}
T{
RULE
T}@T{
ZIP entries are cached according to rules in \f[B]configuration.c\f[R].
T}
T{
T}@T{
T}
T{
COMPRESSED
T}@T{
All compressed ZIP entries are cached.
T}
T{
T}@T{
T}
T{
ALWAYS
T}@T{
All ZIP entries are cached.
T}
T{
T}@T{
T}
.TE
.TP
.B \-s \f[I]path\-of\-symbolic\-link\f[R]
After initialization the specified symlink is created and points to the
mount point.
Previously existing links are overwritten.
This allows to restart ZIPsFS without affecting running programs.
Programs refer to the symlink rather than the real mount\-point.
Consider a ZIPsFS instance which needs to be replaced by a newer one.
The newer one is started with a different mount point.
For some time both instances work simultaneously.
Once no software is reading files from the old instance, the old
instance can be terminated.
.PP
After initialization a symlink to the new mount point is created and
programs start to use the new instance.
.SS FUSE Options
.TP
.B \-f
Run in foreground and display some logs at stdout.
This mode is useful inside tmux.
.TP
.B \-s
Disable multi\-threaded operation to rescue ZIPsFS in case of threading
related bugs.
.TP
.B \-o \f[I]comma separated Options\f[R]
\f[I]\-o allow_other\f[R] Other users can read the files
.SH FILES
.IP \[bu] 2
ZIPsFS_configuration.h and ZIPsFS_configuration.c and
ZIPsFS_configuration_autogen.c: Customizable rules.
Modification requires recompilation.
.IP \[bu] 2
\[ti]/.ZIPsFS: Contains the log file and cache
.SH Implementation
.PP
Written in GNU\-C.
.SS Dependencies
.IP \[bu] 2
fuse3
.IP \[bu] 2
libzip
.SS Operation system
.IP \[bu] 2
Linux 64
.IP \[bu] 2
MacOS: Would require minor adaptations.
.SH BUGS
.PP
Current status: Testing and Bug fixing
.SH AUTHOR
.PP
Christoph Gille
.SH SEE ALSO
.IP \[bu] 2
https://github.com/openscopeproject/ZipROFS
.IP \[bu] 2
https://github.com/google/fuse\-archive
.IP \[bu] 2
https://bitbucket.org/agalanin/fuse\-zip/src
.IP \[bu] 2
https://github.com/google/mount\-zip
.IP \[bu] 2
https://github.com/cybernoid/archivemount
.IP \[bu] 2
https://github.com/mxmlnkn/ratarmount
