chatgpt

* Makefile
CFLAGS = -march=znver2 -g -rdynamic   -pthread -fsanitize=bounds
# -pedantic-errors

* sqlite3

https://www.sqlite.org/c3ref/blob_open.html

* Read-ahead
https://lwn.net/Articles/888715/

* libfuse

https://manpages.ubuntu.com/manpages/xenial/man8/mount.fuse.8.html

intr Allow requests to be interrupted. Turning on this option may result in unexpected behavior, if the filesystem does not support requestq interruption.

ac_attr_timeout=T The timeout in seconds for which file attributes are cached for the purpose of checking if auto_cache should flush the file data on open. The default is the value of attr_timeout

attr_timeout=T The timeout in seconds for which file/directory attributes are cached. The default is 1.0 second.

entry_timeout=T The timeout in seconds for which name lookups will be cached. The default is 1.0 second. For all the timeout options, it is possible to give fractions of a second as well
                (e.g. entry_timeout=2.8)

negative_timeout=T The timeout in seconds for which a negative lookup will be cached. This means, that if file did not exist (lookup retuned ENOENT), the lookup will only be redone after the timeout,
                   and the file/directory will be assumed to not exist until then. The default is 0.0 second, meaning that caching negative lookups are disabled.



** struct fuse_conn_info_opts {

    int atomic_o_trunc;
    int no_remote_posix_lock;
    int no_remote_flock;
    int splice_write;
    int splice_move;
    int splice_read;
    int no_splice_write;
    int no_splice_move;
    int no_splice_read;
    int auto_inval_data;
    int no_auto_inval_data;
    int no_readdirplus;
    int no_readdirplus_auto;
    int async_dio;
    int no_async_dio;
    int writeback_cache;
    int no_writeback_cache;
    int async_read;
    int sync_read;
    unsigned max_write;
    unsigned max_readahead;
    unsigned max_background;
    unsigned congestion_threshold;
    unsigned time_gran;
    int set_max_write;
    int set_max_readahead;
    int set_max_background;
    int set_congestion_threshold;
    int set_time_gran;
};




** static const struct fuse_opt fuse_mount_opts[] = {
    FUSE_MOUNT_OPT("allow_other",		allow_other),
    FUSE_MOUNT_OPT("blkdev",		blkdev),
    FUSE_MOUNT_OPT("auto_unmount",		auto_unmount),
    FUSE_MOUNT_OPT("fsname=%s",		fsname),
    FUSE_MOUNT_OPT("max_read=%u",		max_read),
    FUSE_MOUNT_OPT("subtype=%s",		subtype),
    FUSE_OPT_KEY("allow_other",		KEY_KERN_OPT),
    FUSE_OPT_KEY("auto_unmount",		KEY_FUSERMOUNT_OPT),
    FUSE_OPT_KEY("blkdev",			KEY_FUSERMOUNT_OPT),
    FUSE_OPT_KEY("fsname=",			KEY_FUSERMOUNT_OPT),
    FUSE_OPT_KEY("subtype=",		KEY_SUBTYPE_OPT),
    FUSE_OPT_KEY("blksize=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("default_permissions",	KEY_KERN_OPT),
    FUSE_OPT_KEY("context=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("fscontext=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("defcontext=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("rootcontext=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("max_read=",		KEY_KERN_OPT),
    FUSE_OPT_KEY("user=",			KEY_MTAB_OPT),
    FUSE_OPT_KEY("-n",			KEY_MTAB_OPT),
    FUSE_OPT_KEY("-r",			KEY_RO),
    FUSE_OPT_KEY("ro",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("rw",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("suid",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("nosuid",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("dev",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("nodev",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("exec",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("noexec",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("async",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("sync",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("dirsync",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("atime",			KEY_KERN_FLAG),
    FUSE_OPT_KEY("noatime",			KEY_KERN_FLAG),
    FUSE_OPT_END
};

/local/filesystem/fuse-3.14.0/lib/mount.c

* Debugging

https://jesseevers.com/segfault-malloc-consolidate/
https://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html
Checkout bcc
Run your code through valgrind. If you're mismanaging memory, it will tell you where
www.cs.toronto.edu/~krueger/csc209h/tut/gdb_tutorial.html

https://stackoverflow.com/questions/21565865/filesystem-test-suites

** Stacktraces

https://stackoverflow.com/questions/4636456/how-to-get-a-stack-trace-for-c-using-gcc-with-line-number-information

** strace


sudo strace -q  -e trace=file df -h  Next, to trace all system calls that take a filename as an argument, run this command.
-t time
-i instruct pointer

strace -e trace=write df -h




* gcc
** gcc instrumentation
https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
gcc -fsanitize=thread



* core-dumps
* Reading
* File cache
sudo fatrace | grep sample.txt
https://www.baeldung.com/linux/file-cache-ram
* Local files
/usr/include/linux/stat.h
/usr/include/pthread.h
/local/filesystem/fuse-3.14.0/lib
/local/lib/libzip-1.9.2/lib
/local/filesystem/fuse-3.14.0/example/passthrough.c
/local/filesystem/ZipROFS-dev/ziprofs.py
/local/filesystem/mount-zip-main/lib

* faile safe FS

- GlusterFS
- MooseFS

   fault-tolerant
   LizardFS

Would using Heartbeat and a floating virtual IP help you out? It's not limited to NFS, but a more general approach. see for example Arch Linux wiki: Simple IP Failover with Heartbeat. –
gertvdijk
 Dec 19, 2012 at 23:52
 2
 I second the comment by @gertvdijk. You might be able to configure active/passive failover by configuring the same IP address and hostname on the main server and the failover server. That is how commercial NFS filers work such as EMC VG-2 storage gateway. –
 Dmitri Chubarov
  Dec 20, 2012 at 8:49
  heartbeat would work but this is a strange particular situation. The NFS server is a OS X 10.8 Xsan setup and they removed heartbeat in 10.8 (10.7 had it). –
  Doug
   Jan 4, 2013 at 3:07


 https://access.redhat.com/documentation/en-us/red_hat_gluster_storage/3/html/administration_guide/sect-configuring_automated_ip_failover_for_nfs_and_smb


* malloc
https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/MemoryAlloc.html
https://stackoverflow.com/questions/1739296/malloc-vs-mmap-in-c

* Zip
zip_int8_t zip_fseek(zip_file_t *file, zip_int64_t offset, int whence);
int zip_file_is_seekable(zip_file_t *file);
struct zip_file {
    zip_t *za;         /* zip archive containing this file */
    zip_error_t error; /* error information */
    bool eof;
    zip_source_t *src; /* data source */
};
** Zip_fopen
libzip (-lzip)

Synopsis
#include <zip.h>

zip_file_t * zip_fopen(zip_t *archive, const char *fname, zip_flags_t flags);

zip_file_t * zip_fopen_index(zip_t *archive, zip_uint64_t index, zip_flags_t flags);

DESCRIPTION
The zip_fopen() function opens the file name fname in archive. The flags argument specifies how the name lookup should be done, according to the values are described in zip_name_locate(3).
Also, the following values may be or'ed to it.
  ZIP_FL_COMPRESSED Read the compressed data. Otherwise the data is uncompressed by zip_fread().
  ZIP_FL_UNCHANGED  Read the original data from the zip archive, ignoring any changes made to the file.

The zip_fopen_index() function opens the file at position index.

Return Values Upon successful completion, a struct zip_file pointer is returned. Otherwise, NULL is returned and the error code in archive is set to indicate the error.

ERRORS
[ZIP_ER_CHANGED] The file data has been changed.
[ZIP_ER_COMPNOTSUPP] The compression method used is not supported.
[ZIP_ER_ENCRNOTSUPP] The encryption method used is not supported.
[ZIP_ER_MEMORY] Required memory could not be allocated.
[ZIP_ER_NOPASSWD] The file is encrypted, but no password has been provided.
[ZIP_ER_READ] A file read error occurred.
[ZIP_ER_SEEK] A file seek error occurred.
[ZIP_ER_WRONGPASSWD] The provided password does not match the password used for encryption. Note that some incorrect passwords are not detected by the check done by zip_fopen().
[ZIP_ER_ZLIB] Initializing the zlib stream failed.

The function zip_fopen() may also fail and set zip_err for any of the errors specified for the routine zip_name_locate(3).

The function zip_fopen_index() may also fail with ZIP_ER_INVAL if index is invalid.

See Also libzip(3), zip_fclose(3), zip_fread(3), zip_fseek(3), zip_get_num_entries(3), zip_name_locate(3), zip_set_default_password(3)
* Diann errors

Unhandled exception: page fault on read access to 0xffffffffffffffff in 64-bit code (0x000000014013ca81).
000000014013ca81-000000014013ca81
0000000140000000-0000000140fc8000       Export          diann_l

20230126_PRO1_KTT_003_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMFormate20mM_dia_BD12_1_12096.d

** ERROR: cannot open the raw data folder
[63:12] Loading run /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d                                    [320/1246]
ERROR: cannot open the raw data folder ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_B
C9_1_12101.d/home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/2
0230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d
ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d

ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d
ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d
ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d
ERROR: cannot open the raw data folder /home/cgille/tmp/ZIPsFS/mnt/PRO1/Data/30-0046/20230126_PRO1_KTT_008_30-0046_LisaKahl_P01_VNATSerAuxpM1evoM2Glucose10mMGlycine3mM_dia_BC9_1_12101.d
ERROR: either the dia-PASEF file is damaged or a .dia file produced by an older DIA-NN version has been loaded: performance might be suboptimal, regenerate the .dia file using this DIA-NN version
WARNING: incorrectly recorded isolation window margins
[63:12] 0 library precursors are potentially detectable


wine: Unhandled page fault on read access to FFFFFFFFFFFFFFFF at address 000000014013CA81 (thread 0288), starting debugger...
* fuse_file_info
https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf
/home/cgille/test/fuse/root_3/file_in_root3_root_3_10.txt
struct fuse_file_info {
    /** Open flags.	 Available in open() and release() */
    int flags;

    /** In case of a write operation indicates if this was caused by a delayed write from the page
        cache. If so, then the context's pid, uid, and gid fields will not be valid, and the *fh*
        value may not match the *fh* value that would have been sent with the corresponding
        individual write requests if write caching had been disabled. */

    unsigned int writepage : 1;

    /** Can be filled in by open, to use direct I/O on this file. */
    unsigned int direct_io : 1;

    /** Can be filled in by open. It signals the kernel that any
        currently cached file data (ie., data that the filesystem
        provided the last time the file was open) need not be
        invalidated. Has no effect when set in other contexts (in
        particular it does nothing when set by opendir()). */

   unsigned int keep_cache : 1;

    /** Indicates a flush operation.  Set in flush operation, also      maybe set in highlevel lock operation and lowlevel release      operation. */
    unsigned int flush : 1;

    /** Can be filled in by open, to indicate that the file is not      seekable. */
    unsigned int nonseekable : 1;

    /* Indicates that flock locks for this file should be released.  If set, lock_owner shall contain a valid value. May only be set in ->release(). */
    unsigned int flock_release : 1;

    /** Can be filled in by opendir. It signals the kernel to
        enable caching of entries returned by readdir().  Has no
        effect when set in other contexts (in particular it does nothing when set by open()). */
    unsigned int cache_readdir : 1;

    /** Can be filled in by open, to indicate that flush is not needed        on close. */
    unsigned int noflush : 1;

    /** Padding.  Reserved for future use*/
    unsigned int padding : 24;
    unsigned int padding2 : 32;

    /** File handle id.  May be filled in by filesystem in create,
     * open, and opendir().  Available in most other file operations on the same file handle. */
    uint64_t fh;

    /** Lock owner id.  Available in locking operations and flush */
    uint64_t lock_owner;

    /** Requested poll events.  Available in ->poll.  Only set on kernels        which support it.  If unsupported, this field is set to zero. */
    uint32_t poll_events;
};

* Error code
es
    EPERM 1		/* Not super-user */
!   ENOENT 2	/* No such file or directory */
    ESRCH 3		/* No such process */
    EINTR 4		/* Interrupted system call */
    EIO 5		/* I/O error */
    ENXIO 6		/* No such device or address */
    E2BIG 7		/* Arg list too long */
    ENOEXEC 8	/* Exec format error */
!   EBADF 9		/* Bad file number */
    ECHILD 10	/* No children */
    EAGAIN 11	/* No more processes */
    ENOMEM 12	/* Not enough core */
    EACCES 13	/* Permission denied */
    EFAULT 14	/* Bad address */
    ENOTBLK 15	/* Block device required */
    EBUSY 16	/* Mount device busy */
!   EEXIST 17	/* File exists */
    EXDEV 18	/* Cross-device link */
    ENODEV 19	/* No such device */
    ENOTDIR 20	/* Not a directory */
!   EISDIR 21	/* Is a directory */
!   EINVAL 22	/* Invalid argument */
    ENFILE 23	/* Too many open files in system */
    EMFILE 24	/* Too many open files */
    ENOTTY 25	/* Not a typewriter */
    ETXTBSY 26	/* Text file busy */
!   EFBIG 27	/* File too large */
    ENOSPC 28	/* No space left on device */
!   ESPIPE 29	/* Illegal seek */
    EROFS 30	/* Read only file system */
    EMLINK 31	/* Too many links */
    EPIPE 32	/* Broken pipe */
    EDOM 33		/* Math arg out of domain of func */
    ERANGE 34	/* Math result not representable */
    ENOMSG 35	/* No message of desired type */
    EIDRM 36	/* Identifier removed */
    ECHRNG 37	/* Channel number out of range */
    EL2NSYNC 38	/* Level 2 not synchronized */
    EL3HLT 39	/* Level 3 halted */
    EL3RST 40	/* Level 3 reset */
    ELNRNG 41	/* Link number out of range */
    EUNATCH 42	/* Protocol driver not attached */
    ENOCSI 43	/* No CSI structure available */
    EL2HLT 44	/* Level 2 halted */
    EDEADLK 45	/* Deadlock condition */
    ENOLCK 46	/* No record locks available */
    EBADE 50	/* Invalid exchange */
    EBADR 51	/* Invalid request descriptor */
    EXFULL 52	/* Exchange full */
    ENOANO 53	/* No anode */
    EBADRQC 54	/* Invalid request code */
    EBADSLT 55	/* Invalid slot */
    EDEADLOCK 56	/* File locking deadlock error */
    EBFONT 57	/* Bad font file fmt */
    ENOSTR 60	/* Device not a stream */
    ENODATA 61	/* No data (for no delay io) */
    ETIME 62	/* Timer expired */
    ENOSR 63	/* Out of streams resources */
    ENONET 64	/* Machine is not on the network */
    ENOPKG 65	/* Package not installed */
    EREMOTE 66	/* The object is remote */
    ENOLINK 67	/* The link has been severed */
    EADV 68		/* Advertise error */
    ESRMNT 69	/* Srmount error */
    ECOMM 70	/* Communication error on send */
    EPROTO 71	/* Protocol error */
    EMULTIHOP 74	/* Multihop attempted */
    ELBIN 75	/* Inode is remote (not really error) */
    EDOTDOT 76	/* Cross mount point (not really error) */
    EBADMSG 77	/* Trying to read unreadable message */
!   EFTYPE 79	/* Inappropriate file type or format */
    ENOTUNIQ 80	/* Given log. name not unique */
    EBADFD 81	/* f.d. invalid for this operation */
    EREMCHG 82	/* Remote address changed */
    ELIBACC 83	/* Can't access a needed shared lib */
    ELIBBAD 84	/* Accessing a corrupted shared lib */
    ELIBSCN 85	/* .lib section in a.out corrupted */
    ELIBMAX 86	/* Attempting to link in too many libs */
    ELIBEXEC 87	/* Attempting to exec a shared library */
!   ENOSYS 88	/* Function not implemented */
    ENMFILE 89      /* No more files */
!   ENOTEMPTY 90	/* Directory not empty */
!   ENAMETOOLONG 91	/* File or path name too long */
    ELOOP 92	/* Too many symbolic links */
    EOPNOTSUPP 95	/* Operation not supported on transport endpoint */
    EPFNOSUPPORT 96 /* Protocol family not supported */
    ECONNRESET 104  /* Connection reset by peer */
    ENOBUFS 105	/* No buffer space available */
    EAFNOSUPPORT 106 /* Address family not supported by protocol family */
    EPROTOTYPE 107	/* Protocol wrong type for socket */
    ENOTSOCK 108	/* Socket operation on non-socket */
    ENOPROTOOPT 109	/* Protocol not available */
    ESHUTDOWN 110	/* Can't send after socket shutdown */
    ECONNREFUSED 111	/* Connection refused */
    EADDRINUSE 112		/* Address already in use */
    ECONNABORTED 113	/* Connection aborted */
    ENETUNREACH 114		/* Network is unreachable */
    ENETDOWN 115		/* Network interface is not configured */
!   ETIMEDOUT 116		/* Connection timed out */
!   EHOSTDOWN 117		/* Host is down */
!   EHOSTUNREACH 118	/* Host is unreachable */
    EINPROGRESS 119		/* Connection already in progress */
    EALREADY 120		/* Socket already connected */
    EDESTADDRREQ 121	/* Destination address required */
    EMSGSIZE 122		/* Message too long */
    EPROTONOSUPPORT 123	/* Unknown protocol */
    ESOCKTNOSUPPORT 124	/* Socket type not supported */
    EADDRNOTAVAIL 125	/* Address not available */
    ENETRESET 126
    EISCONN 127		/* Socket is already connected */
    ENOTCONN 128		/* Socket is not connected */
    ETOOMANYREFS 129
    EPROCLIM 130
    EUSERS 131
    EDQUOT 132
    ESTALE 133
    ENOTSUP 134		/* Not supported */
    ENOMEDIUM 135   /* No medium (in tape drive) */
    ENOSHARE 136    /* No such host or network path */
    ECASECLASH 137  /* Filename exists with different case */
    EILSEQ 138
    EOVERFLOW 139	/* Value too large for defined data type */
    EWOULDBLOCK EAGAIN	/* Operation would block */

* struct di
rent

,struct zip_dirent {
  zip_uint32_t changed;
  bool local_extra_fields_read; /*      whether we already read in local header
                                   extra fields */
  bool cloned; /*      whether this instance is cloned, and thus shares
                  non-changed strings */
  bool crc_valid; /*      if CRC is valid (sometimes not for encrypted archives)
                   */
  zip_uint16_t version_madeby;     /* (c)  version of creator */
  zip_uint16_t version_needed;     /* (cl) version needed to extract */
  zip_uint16_t bitflags;           /* (cl) general purpose bit flag */
  zip_int32_t comp_method;         /* (cl) compression method used (uint16 and
                                      ZIP_CM_DEFAULT (-1)) */
  time_t last_mod;                 /* (cl) time of last modification */
  zip_uint32_t crc;                /* (cl) CRC-32 of uncompressed data */
  zip_uint64_t comp_size;          /* (cl) size of compressed data */
  zip_uint64_t uncomp_size;        /* (cl) size of uncompressed data */
  zip_string_t* filename;          /* (cl) file name (NUL-terminated) */
  zip_extra_field_t* extra_fields; /* (cl) extra fields, parsed */
  zip_string_t* comment;           /* (c)  file comment */
  zip_uint32_t disk_number;        /* (c)  disk number start */
  zip_uint16_t int_attrib;         /* (c)  internal file attributes */
  zip_uint32_t ext_attrib;         /* (c)  external file attributes */
  zip_uint64_t offset;             /* (c)  offset of local header */
  zip_uint16_t compression_level; /*      level of compression to use (never
                                     valid in orig) */
  zip_uint16_t encryption_method; /*      encryption method, computed from other
                                     fields */
  char* password;                 /*      file specific encryption password */
};


int listdir(const char *path){
struct dirent *entry;
DIR *dp=opendir(path);
if (dp == NULL){perror("opendir");return -1;}
while((entry = readdir(dp))) puts(entry->d_name);
closedir(dp);
return 0;
}



struct dirent {
    ino_t          d_ino;       /* inode number */
    off_t          d_off;       /* offset to the next dirent */
    unsigned short d_reclen;    /* length of this record */
    unsigned char  d_type;      /* type of file; not supported by all file system types */
    char           d_name[256]; /* filename */
};

* struct zip_stat

    struct zip_stat {
    zip_uint64_t valid;             /* which fields have valid values */
    const char *_Nullable name;     /* name of the file */
    zip_uint64_t index;             /* index within archive */
    zip_uint64_t size;              /* size of file (uncompressed) */
    zip_uint64_t comp_size;         /* size of file (compressed) */
    time_t mtime;                   /* modification time */
    zip_uint32_t crc;               /* crc of file data */
    zip_uint16_t comp_method;       /* compression method used */
    zip_uint16_t encryption_method; /* encryption method used */
    zip_uint32_t flags;             /* reserved for future use */
};
* struct stat

struct stat {
    dev_t     st_dev;     /* ID of device containing file */
    ino_t     st_ino;     /* inode number */     8 Byte
    mode_t    st_mode;    /* protection */
    nlink_t   st_nlink;   /* number of hard links */
    uid_t     st_uid;     /* user ID of owner */
    gid_t     st_gid;     /* group ID of owner */
    dev_t     st_rdev;    /* device ID (if special file) */
    off_t      st_size;    /* total size, in bytes */
    blksize_t st_blksize; /* blocksize for file system I/O */
    blkcnt_t  st_blocks;  /* number of 512B blocks allocated */
    time_t    st_atime;   /* time of last access */
    time_t    st_mtime;   /* time of last modification */
    time_t    st_ctime;   /* time of last status change */
};


* struct rusage {
  struct timeval ru_utime; /* user CPU time used */
  struct timeval ru_stime; /* system CPU time used */
  long   ru_maxrss;        /* maximum resident set size */
  long   ru_ixrss;         /* integral shared memory size */
  long   ru_idrss;         /* integral unshared data size */
  long   ru_isrss;         /* integral unshared stack size */
  long   ru_minflt;        /* page reclaims (soft page faults) */
  long   ru_majflt;        /* page faults (hard page faults) */
  long   ru_nswap;         /* swaps */
  long   ru_inblock;       /* block input operations */
  long   ru_oublock;       /* block output operations */
  long   ru_msgsnd;        /* IPC messages sent */
  long   ru_msgrcv;        /* IPC messages received */
  long   ru_nsignals;      /* signals received */
  long   ru_nvcsw;         /* voluntary context switches */
  long   ru_nivcsw;        /* involuntary context switches */
};

    https://linux.die.net/man/2/stat
struct stat {
    mode_t    st_mode;    /* protection */
    }


    st.st_mode = de->d_type << 12;


The following flags are defined for the st_mode field:
S_IFMT     0170000   bit mask for the file type bit fields
S_IFSOCK   0140000   socket
S_IFLNK    0120000   symbolic link
S_IFREG    0100000   regular file
S_IFBLK    0060000   block device
S_IFDIR    0040000   directory
S_IFCHR    0020000   character device
S_IFIFO    0010000   FIFO
S_ISUID    0004000   set UID bit
S_ISGID    0002000   set-group-ID bit (see below)
S_ISVTX    0001000   sticky bit (see below)


S_ISDIR(
#define     S_ISDIR(m)   (((m) & S_IFMT) == S_IFDIR)


int is_dir(const char *path){
  struct stat path_stat;
  stat(path,&path_stat);
  return S_ISDIR(path_stat.st_mode);
}



#define S_IRWXU 00700
#define S_IRUSR 00400
#define S_IWUSR 00200
#define S_IXUSR 00100

#define S_IRWXG 00070
#define S_IRGRP 00040
#define S_IWGRP 00020
#define S_IXGRP 00010

#define S_IRWXO 00007
#define S_IROTH 00004
#define S_IWOTH 00002
#define S_IXOTH 00001








* struct statfs {
__SWORD_TYPE f_type;    /* Typ des Dateisystems (siehe unten) */
__SWORD_TYPE f_bsize;   /* optimale Übertragungsblockgröße */
fsblkcnt_t   f_blocks;  /* gesamte Datenblöcke im Dateisystem */
fsblkcnt_t   f_bfree;   /* freie Blöcke im Dateisystem */
fsblkcnt_t   f_bavail;  /* freie Blöcke verfügbar für
nicht privilegierte Nutzer */
fsfilcnt_t   f_files;   /* gesamte Dateiknoten im Dateisystem */
fsfilcnt_t   f_ffree;   /* freie Dateiknoten im Dateisystem */
fsid_t       f_fsid;    /* Dateisystemkennung */
__SWORD_TYPE f_namelen; /* maximale Länge für Dateinamen */
__SWORD_TYPE f_frsize;  /* Fragmentgröße (seit Linux 2.6) */
__SWORD_TYPE f_spare[5];
f_bsize
};
* Threads
 https://www.cs.cmu.edu/afs/cs/academic/class/15492-f07/www/pthreads.html#BASICS
          https://www.codequoi.com/en/threads-mutexes-and-concurrent-programming-in-c/



more  /proc/sys/kernel/core_pattern
|/lib/systemd/systemd-coredump %P %u %g %s %t 9223372036854775808 %h
echo core.%e > /proc/sys/kernel/core_pattern

You can detect which process is triggering the coredump: (man core):

       %%  a single % character
       %p  PID of dumped process
       %u  (numeric) real UID of dumped process
       %g  (numeric) real GID of dumped process
       %s  number of signal causing dump
       %t  time of dump, expressed as seconds since the Epoch,  1970-01-01
           00:00:00 +0000 (UTC)
       %h  hostname (same as nodename returned by uname(2))
       %e  executable filename (without path prefix)
       %E  pathname of executable, with slashes ('/') replaced by exclama‐
           tion marks ('!').
       %c  core file size soft resource limit of crashing  process  (since
           Linux 2.6.24)


** Making a core dump

$ gdb -p 2071
(gdb) generate-core-file
Saved corefile core.2071
(gdb) quit
Now you have a coredump file called core.2071.


* open vs open in C

1) fopen is a library function while open is a system call.

2) fopen provides buffered IO which is faster compare to open which is non buffered.

3) fopen is portable while open not portable (open is environment specific).

4) fopen returns a pointer to a FILE structure(FILE *); open returns an integer that identifies the file.

5) A FILE * gives you the ability to use fscanf and other stdio functions.

* hashmaps dicts duplicates

https://www.gnu.org/software/libc/manual/html_node/Array-Search-Function.html#index-lfind
https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/

https://github.com/jean553/c-data-structures



* Performance
** Mount options
max_write
big_writes
max_read
remember
static const struct fuse_opt fuse_lib_opts[] = {
    FUSE_OPT_KEY("debug",             FUSE_OPT_KEY_KEEP),
    FUSE_OPT_KEY("-d",            FUSE_OPT_KEY_KEEP),
    FUSE_LIB_OPT("debug",             debug, 1),
    FUSE_LIB_OPT("-d",            debug, 1),
    FUSE_LIB_OPT("kernel_cache",          kernel_cache, 1),
    FUSE_LIB_OPT("auto_cache",        auto_cache, 1),
    FUSE_LIB_OPT("noauto_cache",          auto_cache, 0),
    FUSE_LIB_OPT("no_rofd_flush",         no_rofd_flush, 1),
    FUSE_LIB_OPT("umask=",            set_mode, 1),
    FUSE_LIB_OPT("umask=%o",          umask, 0),
    FUSE_LIB_OPT("uid=",              set_uid, 1),
    FUSE_LIB_OPT("uid=%d",            uid, 0),
    FUSE_LIB_OPT("gid=",              set_gid, 1),
    FUSE_LIB_OPT("gid=%d",            gid, 0),
    FUSE_LIB_OPT("entry_timeout=%lf",     entry_timeout, 0),
    FUSE_LIB_OPT("attr_timeout=%lf",      attr_timeout, 0),
    FUSE_LIB_OPT("ac_attr_timeout=%lf",   ac_attr_timeout, 0),
    FUSE_LIB_OPT("ac_attr_timeout=",      ac_attr_timeout_set, 1),
    FUSE_LIB_OPT("negative_timeout=%lf",  negative_timeout, 0),
    FUSE_LIB_OPT("noforget",              remember, -1),
    FUSE_LIB_OPT("remember=%u",           remember, 0),
    FUSE_LIB_OPT("modules=%s",        modules, 0),
    FUSE_OPT_END
};


"    -o kernel_cache        cache files in kernel\n"
"    -o [no]auto_cache      enable caching based on modification times (off)\n"
"    -o no_rofd_flush       disable flushing of read-only fd on close (off)\n"
"    -o umask=M             set file permissions (octal)\n"
"    -o uid=N               set file owner\n"
"    -o gid=N               set file group\n"
"    -o entry_timeout=T     cache timeout for names (1.0s)\n"
"    -o negative_timeout=T  cache timeout for deleted names (0.0s)\n"
"    -o attr_timeout=T      cache timeout for attributes (1.0s)\n"
"    -o ac_attr_timeout=T   auto cache timeout for attributes (attr_timeout)\n"
"    -o noforget            never forget cached inodes\n"
"    -o remember=T          remember cached inodes for T seconds (0s)\n"
"    -o modules=M1[:M2...]  names of modules to push onto filesystem stack\n");

entry_timeout=10,attr_timeout=10,ac_attr_timeout=10,noforget

* Why getattr

* mmap
sqlite3_config(SQLITE_CONFIG_MMAP_SIZE
sqlite3_config(SQLITE_CONFIG_MMAP_SIZE, defaultSize, maximumSize);
 https://github.com/jemalloc/jemalloc/issues/329
 https://gist.github.com/rLinks234/6c7000fda4d2ab4c6b8bc52479b03353
https://github.com/pmem/syscall_intercept


* zoombies
In ZIPsFS are still many open tdf.


$ pgrep -u cgille -a -f diann_L
1243126 diann_L.exe
1789635 diann_L.exe
$ ps -p 1243126
    PID TTY          TIME CMD
    1243126 pts/72   02:36:41 diann_L.exe <defunct

$ ps -p 1789635
   PID TTY          TIME CMD
   1789635 pts/72   03:05:42 diann_L.exe <defunct>
$ ls /proc/1243126/fd
        ls: cannot open directory '/proc/1243126/fd': Permission denied
$ sudo ls /proc/1243126/fd
        [sudo] password for cgille:
$ sudo ls /proc/1243126/fd
$ sudo ls /proc/1789635/fd
