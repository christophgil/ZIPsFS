static int mutex_count(int mutex,int inc);
static const char *simplify_name(char *s,const char *u, const char *zipfile);
static const char *unsimplify_name(char *u,const char *s,const char *zipfile);
static void directory_debug_filenames(const char *func,const char *msg,const struct directory_core *d);
static void directory_destroy(struct directory *d);
static void directory_add_file(uint8_t flags,struct directory *dir, int64_t inode, const char *n0,uint64_t size, zip_uint32_t crc);
static void dircache_directory_to_cache(const struct directory *dir);
static bool dircache_directory_from_cache(struct directory *dir, const int64_t mtime);
static void *infloop_observe_root(void *arg);
static void start_threads();
static void dircache_clear_if_reached_limit(struct rootdata *r,size_t limit);
static void dircache_clear_if_reached_limit_all();
static bool wait_for_root_timeout(struct rootdata *r);
static void stat_set_dir(struct stat *s);
static void init_stat(struct stat *st, int64_t size,struct stat *uid_gid);
static void maybe_evict_from_filecache(const int fdOrZero,const char *realpath,const char *zipentryOrNull);
static void zpath_init(struct zippath *zpath,const char *virtualpath,char *strgs_on_stack);
static void _zpath_assert_strlen(const char *fn,const char *title,struct zippath *zpath);
static char *zpath_newstr(struct zippath *zpath);
static int zpath_strncat(struct zippath *zpath,const char *s,int len);
static int zpath_strcat(struct zippath *zpath,const char *s);
static int zpath_commit(const struct zippath *zpath);
static void zpath_destroy(struct zippath *zpath);
static int zpath_stat(struct zippath *zpath,const struct rootdata *r);
static struct zip *zip_open_ro(const char *orig);
static int zip_contained_in_virtual_path(const char *path, int *shorten, char *append[]);
static bool readdir_from_dircache_zip_or_dir(const int opt, struct directory *mydir,const int64_t mtime);
static void *infloop_dircache(void *arg);
static int test_realpath(struct zippath *zpath, const int root);
static int test_realpath_any_root(struct zippath *zpath,const int onlyThisRoot, const int notThisRoot);
static int find_realpath_any_root(struct zippath *zpath,const int onlyThisRoot);
static bool fhdata_can_destroy(struct fhdata *d);
static void fhdata_zip_close(bool alsoZipArchive,struct fhdata *d);
static void memcache_free(struct fhdata *d);
static void fhdata_destroy(struct fhdata *d);
static zip_file_t *fhdata_zip_open(struct fhdata *d,const char *msg);
static struct fhdata* fhdata_create(const char *path,const uint64_t fh);
static struct fhdata* fhdata_get(const char *path,const uint64_t fh);
static struct fhdata *fhdata_by_virtualpath(const char *path,uint64_t path_hash, const struct fhdata *not_this,const enum fhdata_having having);
static struct fhdata *fhdata_by_subpath(const char *path);
static int read_zipdir(struct rootdata *r,struct zippath *zpath,void *buf, fuse_fill_dir_t filler_maybe_null,struct ht *no_dups);
static int impl_readdir(struct rootdata *r,struct zippath *zpath, void *buf, fuse_fill_dir_t filler,struct ht *no_dups);
static int realpath_mk_parent(char *realpath,const char *path);
static void *xmp_init(struct fuse_conn_info *conn,struct fuse_config *cfg);
static int xmp_getattr(const char *path, struct stat *stbuf,struct fuse_file_info *fi_or_null);
static int xmp_access(const char *path, int mask);
static int xmp_readlink(const char *path, char *buf, size_t size);
static int xmp_unlink(const char *path);
static int xmp_rmdir(const char *path);
static int64_t trackMemUsage(const enum memusage t,int64_t a);
static size_t memcache_read(char *buf,const struct fhdata *d, const size_t size, const off_t offset);
static void memcache_store(struct fhdata *d);
static void *infloop_memcache(void *arg);
static bool memcache_is_advised(const struct fhdata *d);
static struct fhdata *memcache_waitfor(struct fhdata *d,size_t size,size_t offset);
static int xmp_open(const char *path, struct fuse_file_info *fi);
static int xmp_truncate(const char *path, off_t size,struct fuse_file_info *fi);
static int xmp_readdir(const char *path, void *buf, fuse_fill_dir_t filler,off_t offset, struct fuse_file_info *fi,enum fuse_readdir_flags flags);
static int xmp_mkdir(const char *create_path, mode_t mode);
static int create_or_open(const char *create_path, mode_t mode,struct fuse_file_info *fi);
static int xmp_create(const char *create_path, mode_t mode,struct fuse_file_info *fi);
static int xmp_write(const char *create_path, const char *buf, size_t size,off_t offset, struct fuse_file_info *fi);
static off_t xmp_lseek(const char *path, off_t off, int whence, struct fuse_file_info *fi);
static int fhdata_read_zip(const char *path, char *buf, const size_t size, const off_t offset,struct fhdata *d);
static int fhdata_read(char *buf, const size_t size, const off_t offset,struct fhdata *d);
static int xmp_read(const char *path, char *buf, const size_t size, const off_t offset,struct fuse_file_info *fi);
static int xmp_release(const char *path, struct fuse_file_info *fi);
static int xmp_flush(const char *path, struct fuse_file_info *fi);
